{"version":3,"sources":["WifiConfigurationService.ts","App.tsx","Provisioner.ts","GatewayDevice.ts","ConnectScreen.tsx","HubConfiguredScreen.tsx","ScanListScreen.tsx","PasswordInputScreen.tsx","serviceWorker.js","index.js","WifiScannerService.ts"],"names":["WifiConfigurationStatus","WifiConfigurationService","server","onStatusChange","service","status","ssid","password","security","statusChangeCallback","this","getPrimaryService","uuid","then","initialiseCharacteristics","console","error","WifiConfigurationStatusCharacteristic","WifiConfigurationSsidCharacteristic","WifiConfigurationPasswordCharacteristic","WifiConfigurationSecurityCharacteristic","Promise","all","init","callback","characteristic","getCharacteristic","addEventListener","event","target","value","getUint8","startNotifications","ERROR","readValue","buffer","byteLength","state","info","SAVE","JOIN","writeValue","Buffer","from","AppPage","Provisioner","device","onConfigStatusChange","onScanStatusChange","log","initialiseGattServer","initialiseServices","Error","scannerService","getScanList","scanList","readScanList","pushCredentials","storeCredentials","joinNetwork","GatewayDevice","_device","_server","configurationService","gatt","connect","configurationServiceStatusChangeCallback","scanningServiceStatusChangeCallback","WifiScannerService","setStatus","WifiScanningStatus","SCAN","list","getList1","length","warn","JSON","parse","getStatus","IDLE","setSsid","setPassword","setSecurity","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","ConnectScreen","props","active","loading","deviceName","scanDevice","className","Dimmer","Loader","Icon","name","alt","size","Button","onClick","React","Component","HubConfiguredScreen","handleBackButton","Segment","inverted","color","ScanListScreen","collectPassword","networkList","Header","Table","Body","map","network","index","Row","key","Cell","PasswordInputScreen","updatePassword","configureNetwork","Input","placeholder","onChange","App","provisioner","undefined","page","CONNECT","connected","bind","setLoading","handleConfigStateChange","handleScanStateChange","SCANNED","setState","handleForwardButton","SAVED","joinWifi","JOINED","_","searchDevice","networkName","data","setWifiConfig","previousPage","CONFIGURED","nextPage","SCAN_LIST","PASSWORD_INPUT","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","WifiScanningStatusCharacteristic","WifiScanningList1Characteristic","networks","string","TextDecoder","decode"],"mappings":"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","file":"static/js/main.81f74c85.chunk.js","sourcesContent":["\n\n// const UUID = {\n//     WIFI_CONFIGURATION: {\n//       SERVICE: '2b42180d-0000-1000-9900-00805f9b5ab3',\n//       STATUS: '0000180d-0000-1000-9901-00805f9b34fb',\n//       SSID: '0000180d-0000-1000-9902-00805f9b34fb',\n//       PASSWORD: '0000180d-0000-1000-9903-00805f9b34fb',\n//       SECURITY: '0000180d-0000-1000-9904-00805f9b34fb'\n//     }\n// }\n\nexport default class WifiConfigurationService {\n\n    static uuid: string = '2b42180d-0000-1000-9900-00805f9b5ab3'\n\n    private server: BluetoothRemoteGATTServer\n    service: BluetoothRemoteGATTService | null = null\n\n    status: WifiConfigurationStatusCharacteristic | undefined\n    ssid: WifiConfigurationSsidCharacteristic | undefined\n    password: WifiConfigurationPasswordCharacteristic | undefined\n    security: WifiConfigurationSecurityCharacteristic | undefined\n\n    statusChangeCallback: Function\n\n    constructor(server: BluetoothRemoteGATTServer, onStatusChange: Function) {\n        this.server = server\n        this.statusChangeCallback = onStatusChange\n    }\n\n    async init() {\n        try {\n\n            await this.server.getPrimaryService(WifiConfigurationService.uuid).then(service => this.service = service)\n            await this.initialiseCharacteristics()\n\n        } catch(ex) {\n            console.error(ex)\n        }\n        return \n    }\n\n    async initialiseCharacteristics() {\n        if (!this.service) {\n            console.error('No Service found')\n            return\n        }\n        this.status = new WifiConfigurationStatusCharacteristic(this.service, this.statusChangeCallback)\n        this.ssid = new WifiConfigurationSsidCharacteristic(this.service)\n        this.password = new WifiConfigurationPasswordCharacteristic(this.service)\n        this.security = new WifiConfigurationSecurityCharacteristic(this.service)\n        await Promise.all([this.status.init(),\n            this.ssid.init(),\n            this.password.init(),\n            this.security.init()]\n        )\n    }\n\n}\n\nexport enum WifiConfigurationStatus {\n    IDLE,\n    SAVE,\n    SAVING,\n    SAVED,\n    JOIN,\n    JOINING,\n    JOINED,\n    ERROR\n}\n\nexport class WifiConfigurationStatusCharacteristic {\n    static uuid = '0000180d-0000-1000-9901-00805f9b34fb'\n\n    service: BluetoothRemoteGATTService\n    characteristic: BluetoothRemoteGATTCharacteristic | undefined\n    callback: Function\n    \n    constructor(service: BluetoothRemoteGATTService, callback: Function) {\n        this.service = service\n        this.callback = callback\n    }\n\n    async init() {\n        this.characteristic = await this.service.getCharacteristic(WifiConfigurationStatusCharacteristic.uuid)\n        this.characteristic.addEventListener(\"characteristicvaluechanged\", (event: Event) => {\n            let status = (event.target as BluetoothRemoteGATTCharacteristic).value?.getUint8(0)\n            if(this.callback) this.callback(status as WifiConfigurationStatus)\n        })  \n        this.characteristic.startNotifications()     \n    }\n\n    async getStatus():Promise<WifiConfigurationStatus> {\n        if (!this.characteristic) {\n            console.error('No Characteristic found')\n            return WifiConfigurationStatus.ERROR\n        }\n        let status = await this.characteristic.readValue()\n        if (status.buffer.byteLength === 1) {\n            let state: WifiConfigurationStatus = status.getUint8(0)\n            console.info('Wifi Configuration State', state)\n            if(state < WifiConfigurationStatus.ERROR) {\n                return state as WifiConfigurationStatus\n            }\n        }\n        return WifiConfigurationStatus.ERROR\n    }\n\n    async setStatus(status: WifiConfigurationStatus) {\n        if (!this.characteristic) {\n            console.error('No Characteristic found')\n            return\n        }\n        if ((status !== WifiConfigurationStatus.SAVE) && (status !== WifiConfigurationStatus.JOIN))\n            return\n        return await this.characteristic.writeValue(Buffer.from([status]))\n    }\n\n}\n\nexport class WifiConfigurationSsidCharacteristic {\n    static uuid = '0000180d-0000-1000-9902-00805f9b34fb'\n\n    service: BluetoothRemoteGATTService\n    characteristic: BluetoothRemoteGATTCharacteristic | undefined\n\n    constructor(service: BluetoothRemoteGATTService) {\n        this.service = service\n    }\n\n    async init() {\n        this.characteristic = await this.service.getCharacteristic(WifiConfigurationSsidCharacteristic.uuid)\n    }\n\n    async setSsid(ssid: string) {\n        if (!this.characteristic) {\n            console.error('No Characteristic found')\n            return\n        }\n        return await this.characteristic.writeValue(Buffer.from(ssid))\n    }\n}\n\nexport class WifiConfigurationPasswordCharacteristic {\n    static uuid = '0000180d-0000-1000-9903-00805f9b34fb'\n\n    service: BluetoothRemoteGATTService\n    characteristic: BluetoothRemoteGATTCharacteristic | undefined\n\n    constructor(service: BluetoothRemoteGATTService) {\n        this.service = service\n    }\n\n    async init() {\n        this.characteristic = await this.service.getCharacteristic(WifiConfigurationPasswordCharacteristic.uuid)\n    }\n\n    async setPassword(password: string) {\n        if (!this.characteristic) {\n            console.error('No Characteristic found')\n            return\n        }\n        return await this.characteristic.writeValue(Buffer.from(password))\n    }\n\n}\n\nexport class WifiConfigurationSecurityCharacteristic {\n    static uuid = '0000180d-0000-1000-9904-00805f9b34fb'\n\n    service: BluetoothRemoteGATTService\n    characteristic: BluetoothRemoteGATTCharacteristic | undefined\n\n    constructor(service: BluetoothRemoteGATTService) {\n        this.service = service\n    }\n\n    async init() {\n        this.characteristic = await this.service.getCharacteristic(WifiConfigurationSecurityCharacteristic.uuid)\n    }\n\n    async setSecurity(security: number) {\n        if (!this.characteristic) {\n            console.error('No Characteristic found')\n            return\n        }\n        return await this.characteristic.writeValue(Buffer.from([security]))\n    }\n\n}\n","import React from 'react';\n\nimport { InputOnChangeData } from 'semantic-ui-react'\n\nimport Provisioner from './Provisioner'\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport GatewayDevice from './GatewayDevice';\nimport { WifiScanningStatus } from './WifiScannerService';\nimport { WifiConfigurationStatus } from './WifiConfigurationService';\n\nimport ConnectScreen from './ConnectScreen'\nimport HubConfiguredScreen from './HubConfiguredScreen';\nimport ScanListScreen from './ScanListScreen';\nimport PasswordInputScreen from './PasswordInputScreen';\n\nenum AppPage {\n  CONNECT,\n  SCAN_LIST,\n  PASSWORD_INPUT,\n  CONFIGURED\n}\n\ninterface IState {\n  deviceName: string | undefined\n  page: AppPage\n  connected: boolean\n  loading: boolean\n  ssid: string | undefined\n  password: string | undefined\n  networkList: string[]\n  provisioner: Provisioner | undefined\n}\n\nclass App extends React.Component<{}, IState> {\n\n  provisioner: Provisioner | undefined\n\n  constructor(props: {}) {\n    super(props)\n    this.state = {\n      deviceName: undefined,\n      networkList: [],\n      ssid: undefined,\n      page: AppPage.CONNECT,\n      connected: false,\n      password: undefined,\n      provisioner: undefined,\n      loading: false\n    }\n\n    this.scanDevice = this.scanDevice.bind(this)\n    this.collectPassword = this.collectPassword.bind(this)\n    this.updatePassword = this.updatePassword.bind(this)\n    this.handleBackButton = this.handleBackButton.bind(this)\n    this.setLoading = this.setLoading.bind(this)\n    this.handleConfigStateChange = this.handleConfigStateChange.bind(this)\n    this.configureNetwork = this.configureNetwork.bind(this)\n    this.handleScanStateChange = this.handleScanStateChange.bind(this)\n  }\n\n  async handleScanStateChange(state: WifiScanningStatus) {\n    console.log('Scan State:', state)\n    const { provisioner } = this.state\n    if (provisioner) {\n      if (state === WifiScanningStatus.ERROR) {\n        console.error('Wifi scanning failed!!!')\n        return\n      }\n      if (state === WifiScanningStatus.SCANNED) {\n        console.log('scanned')\n        let list = await provisioner.readScanList()\n        console.log(list)\n        if (list) {\n          this.setState({\n            networkList: list\n          })\n          this.setLoading(false)\n          this.handleForwardButton()\n        }\n      }\n    }\n  }\n\n  async handleConfigStateChange(state: WifiConfigurationStatus) {\n    console.log('Config State:', state)\n    if (state === WifiConfigurationStatus.ERROR) {\n      console.error('Wifi Config failed!!!')\n      return\n    } else if (state === WifiConfigurationStatus.SAVED) {\n      const { provisioner } = this.state\n      if (provisioner) {\n        console.log('Start join')\n        await provisioner.joinWifi()\n      }\n    } else if (state === WifiConfigurationStatus.JOINED) {\n      this.handleForwardButton()\n    }\n  }\n\n  async scanDevice(_: any) {\n\n    let provisioner\n\n    try {\n      this.setLoading(true)\n      provisioner = new Provisioner(await GatewayDevice.searchDevice())\n      await provisioner.init(this.handleConfigStateChange, this.handleScanStateChange)\n      this.setLoading(false)\n      this.setState({\n        provisioner: provisioner\n      })\n      this.setLoading(true)\n      await provisioner.getScanList()\n    } catch (ex) {\n      console.error('ERROR', ex)\n    }\n  }\n\n  async collectPassword(networkName: string) {\n    console.log('collectPassword')\n    this.setLoading(true)\n    this.setState({\n      ssid: networkName\n    })\n    this.handleForwardButton()\n    this.setLoading(false)\n\n  }\n\n  updatePassword(_: any, data: InputOnChangeData) {\n    console.log('updatePassword', data.value)\n    this.setState({\n      password: data.value\n    })\n  }\n\n  async configureNetwork(password: string | undefined) {\n    console.log('configureNetwork')\n    this.setLoading(true)\n    const { ssid, provisioner } = this.state\n    if (ssid && password)\n      provisioner?.setWifiConfig(ssid, password)\n    this.setLoading(false)\n  }\n\n  setLoading(status: boolean) {\n    this.setState({\n      loading: status\n    })\n  }\n\n  handleBackButton() {\n    const { page } = this.state\n    if (page === AppPage.CONNECT)\n      return\n    let previousPage = page - 1\n    this.setState({\n      page: previousPage\n    })\n  }\n\n  handleForwardButton() {\n    const { page } = this.state\n    if (page === AppPage.CONFIGURED)\n      return\n    let nextPage = page + 1\n    this.setState({\n      page: nextPage\n    })\n  }\n\n  render() {\n\n    const { deviceName, page, loading, networkList, ssid, password } = this.state\n    return <div className=\"App\">\n      <ConnectScreen active={page === AppPage.CONNECT} deviceName={deviceName} loading={loading} scanDevice={this.scanDevice} />\n      <ScanListScreen active={page === AppPage.SCAN_LIST} collectPassword={this.collectPassword} deviceName={deviceName} networkList={networkList} loading={loading} handleBackButton={this.handleBackButton} />\n      <PasswordInputScreen active={page === AppPage.PASSWORD_INPUT} password={password} handleBackButton={this.handleBackButton} ssid={ssid} updatePassword={this.updatePassword} configureNetwork={this.configureNetwork} />\n      <HubConfiguredScreen active={page === AppPage.CONFIGURED} deviceName={deviceName} loading={loading} handleBackButton={this.handleBackButton} ssid={ssid} />\n    </div>\n  }\n}\n\nexport default App;\n","import GatewayDevice from \"./GatewayDevice\";\n\nexport default class Provisioner {\n    \n    private device: GatewayDevice\n    \n    constructor(device: GatewayDevice) {\n        this.device = device\n    }\n\n    async init(onConfigStatusChange: Function, onScanStatusChange: Function) {\n        console.log(\"=====\")\n        await this.device.initialiseGattServer()\n        await this.device.initialiseServices(onConfigStatusChange, onScanStatusChange)\n        console.log(\"=====\")\n    }\n\n    async getScanList(): Promise<void> {\n        try {\n            if(!this.device)\n                throw Error(\"Could not find device\")\n            if(!this.device.scannerService)\n                throw Error(\"could not find service\")\n            await this.device.getScanList()\n        } catch(ex) {\n            console.error(ex)\n        }\n        return\n    }\n\n    async readScanList(): Promise<string[]> {\n        let scanList:string[] = [\"Tesseract\", \"Poseidon\"]\n        try {\n            if(!this.device)\n                throw Error(\"Could not find device\")\n            if(!this.device.scannerService)\n                throw Error(\"could not find service\")\n            scanList = await this.device.readScanList()\n            console.log(scanList)\n            return scanList\n        } catch(ex) {\n            console.error(ex)\n        }\n        return scanList\n    }\n\n    async setWifiConfig(ssid: string, password: string) {\n        try {\n            await this.device.pushCredentials(ssid, password, 2)\n            await this.device.storeCredentials()\n        } catch(ex) {\n            console.error(ex)\n        }\n    }\n\n    async joinWifi() {\n        try {\n            console.log('joinWifi')\n            await this.device.joinNetwork()\n            console.log('Joined')\n        } catch(ex) {\n            console.error(ex)\n        }\n    }\n\n}\n","import WifiConfigurationService, { WifiConfigurationStatus } from './WifiConfigurationService'\nimport WifiScannerService, { WifiScanningStatus } from './WifiScannerService'\n\n\nexport default class GatewayDevice {\n\n    private _device: BluetoothDevice\n    private _server: BluetoothRemoteGATTServer | undefined\n\n    configurationService: WifiConfigurationService | undefined\n    scannerService: WifiScannerService | undefined\n\n\n\n    constructor(device: BluetoothDevice) {\n        this._device = device\n    }\n\n    async initialiseGattServer() {\n        console.log('Initialising GATT Server')\n        this._server = await this._device.gatt;\n        return await this._device.gatt?.connect();\n    }\n\n    async initialiseServices(configurationServiceStatusChangeCallback: Function,\n        scanningServiceStatusChangeCallback: Function) {\n        console.log('Initialising Services')\n        if (!this._server)\n            return\n        this.configurationService = new WifiConfigurationService(this._server, configurationServiceStatusChangeCallback)\n        this.scannerService = new WifiScannerService(this._server, scanningServiceStatusChangeCallback)\n        console.log('Device Services initing...')\n        await Promise.all([\n            this.configurationService.init(),\n            this.scannerService.init()\n        ])\n        console.log('Device Services init')\n        return\n    }\n\n    async getScanList(): Promise<void> {\n        console.log('getScanList')\n        if (!this.scannerService)\n            throw Error( 'Scanner Service Not init' )\n        await this.scannerService?.status?.setStatus( WifiScanningStatus.SCAN )\n        return\n    }\n\n    async readScanList(): Promise<string[]> {\n        console.log('readScanList')\n        let list\n        if (this.scannerService?.list) {\n            list = await this.scannerService.list.getList1()\n            if (list.length === 200)\n                console.warn('List may be getting chopped off')\n            // list = await this.scannerService.list.getList2()\n            return JSON.parse(list)\n        }\n        return []\n    }\n\n    async pushCredentials(ssid: string, password: string, security: number): Promise<void> {\n        console.log('pushCredentials', ssid, password, security)\n        if (!this.configurationService)\n            throw Error('Configuration Service not init')\n        let status = await this.configurationService.status?.getStatus()\n        if (status === WifiConfigurationStatus.IDLE) {\n            console.log('config service idle. let\\'s send stuff')\n            await this.configurationService.ssid?.setSsid(ssid)\n            await this.configurationService.password?.setPassword(password)\n            await this.configurationService.security?.setSecurity(security)\n            console.log('credentials sent')\n        }\n        return\n    }\n\n    async storeCredentials() {\n        console.log('storeCredentials')\n        if (!this.configurationService)\n            throw Error('Configuration Service not init')\n        let status = await this.configurationService.status?.getStatus()\n        if (status === WifiConfigurationStatus.IDLE) {\n            console.log('config service idle. let\\'s store stuff')\n            await this.configurationService.status?.setStatus(WifiConfigurationStatus.SAVE)\n            console.log('credentials store command sent')\n        }\n        return\n    }\n\n    async joinNetwork() {\n        console.log('joinNetwork')\n        if (!this.configurationService)\n            throw Error('Configuration Service not init')\n        console.log('config saved already, let\\'s connect to this network')\n        await this.configurationService.status?.setStatus(WifiConfigurationStatus.JOIN)\n        console.log('wifi connect command sent')\n    }\n\n    static async searchDevice(): Promise<GatewayDevice> {\n        console.log('Searching Devices')\n        return new GatewayDevice(await navigator.bluetooth.requestDevice({\n            acceptAllDevices: true,\n            optionalServices: [0x180D, WifiConfigurationService.uuid, WifiScannerService.uuid]\n        }))\n    }\n\n}\n","import React from 'react'\nimport { Icon, Dimmer, Loader, Button } from 'semantic-ui-react'\n\ninterface IProps {\n  active: boolean\n  deviceName: string | undefined\n  scanDevice: Function | any\n  loading: boolean\n}\n\n\nexport default class ConnectScreen extends React.Component<IProps> {\n\n  public render() {\n    const { active, loading, deviceName, scanDevice } = this.props\n\n    if (!active)\n      return <div></div>\n\n    return <header className=\"App-header\">\n      <Dimmer active={loading}>\n        <Loader>Connecting to {deviceName ?? \"Smart Hub\"}</Loader>\n      </Dimmer>\n\n      <Icon name=\"wifi\" className=\"App-logo\" alt=\"logo\" size=\"huge\"></Icon>\n      <p>Pair with a HIFE Hub to get started.</p>\n      <Button onClick={scanDevice}>\n        Scan\n      </Button>\n    </header>\n  }\n}\n","import React from 'react'\nimport { Segment, Icon, Dimmer, Loader } from 'semantic-ui-react'\n\ninterface IProps {\n    active: boolean\n    deviceName: string | undefined\n    handleBackButton: Function | undefined\n    loading: boolean\n    ssid: string | undefined\n}\n\n\nexport default class HubConfiguredScreen extends React.Component<IProps> {\n\n    public render() {\n        const { active, loading, deviceName, ssid, handleBackButton } = this.props\n\n        if(!active)\n            return <div></div>\n\n        return <Segment inverted className=\"App configured\">\n        <Dimmer active={loading}>\n          <Loader>Connecting {deviceName ?? \"Smart Hub\"} to {ssid ?? \"Smart Hub\"}</Loader>\n        </Dimmer>\n\n        <Icon name=\"arrow circle left\" onClick={handleBackButton} color=\"yellow\" size=\"large\"></Icon>\n        <Icon name=\"check circle\" size=\"massive\" color=\"green\"></Icon>\n        <div>Your Smart Hub has been connected to WiFi successfully</div>\n      </Segment>\n    }\n}\n","import React from 'react'\nimport { Icon, Dimmer, Loader, Segment, Table, Header } from 'semantic-ui-react'\n\ninterface IProps {\n    active: boolean\n    deviceName: string | undefined\n    loading: boolean\n    networkList: string[]\n    collectPassword: Function\n    handleBackButton: Function\n}\n\nexport default class ScanListScreen extends React.Component<IProps> {\n\n    public render() {\n        const { active, collectPassword, deviceName, loading, handleBackButton, networkList } = this.props\n        if(!active) return <div/>\n        \n        return <Segment inverted className=\"App scan_list\">\n        <Dimmer active={loading}>\n          <Loader>Connecting to {deviceName ?? \"Smart Hub\"}</Loader>\n        </Dimmer>\n        <Icon name=\"arrow circle left\" onClick={handleBackButton} color=\"yellow\" size=\"large\"></Icon>\n        <Header>\n          {deviceName ?? \"Havells\"}\n        </Header>\n        <Table inverted>\n          <Table.Body>\n            {\n              networkList.map((network, index) => <Table.Row key={index}><Table.Cell onClick={() => { collectPassword(network) }}>{network}</Table.Cell></Table.Row>)\n            }\n          </Table.Body>\n        </Table>\n      </Segment>\n    }\n}\n","import React from 'react'\n\nimport { Icon, Button, Segment, Header, Input } from 'semantic-ui-react'\n\ninterface IProps {\n    active: boolean\n    ssid: string | undefined\n    updatePassword: Function | any\n    configureNetwork: Function\n    password: string | undefined\n    handleBackButton: Function\n}\n\nexport default class PasswordInputScreen extends React.Component<IProps> {\n\n    public render() {\n        const { active, handleBackButton, ssid, updatePassword, configureNetwork, password } = this.props\n        if(!active) return <div/>\n        \n        return <Segment inverted className=\"App password_input\">\n        <Icon name=\"arrow circle left\" onClick={handleBackButton} color=\"yellow\" size=\"large\"></Icon>\n        <Icon name=\"wifi\" size=\"huge\" color=\"blue\"></Icon>\n        <Header size=\"medium\">{ssid}</Header>\n        <Input placeholder='Password' size=\"large\" onChange={updatePassword} />\n        <Button onClick={() => { configureNetwork(password) }}>Connect</Button>\n      </Segment>\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default class WifiScannerService {\n\n    static uuid: string = '2b42180d-0000-1000-7700-00805f9b5ab3'\n\n    private service: BluetoothRemoteGATTService | null = null\n    private server: BluetoothRemoteGATTServer\n    status: WifiScanningStatusCharacteristic | null = null\n    list: WifiScanningList1Characteristic | null = null\n    statusChangeCallback: Function\n\n    constructor(server: BluetoothRemoteGATTServer, onStatusChange: Function) {\n        this.server = server\n        this.statusChangeCallback = onStatusChange\n    }\n\n    async init() {\n        console.log('init')\n        try {\n            this.service = await this.server.getPrimaryService(WifiScannerService.uuid)\n            console.log('WifiScannerService', this.service, 'isAvailable')\n            await this.initialiseCharacteristics()\n            console.log('WifiScannerService', 'characteristics', 'isAvailable')\n\n        } catch(ex) {\n            console.error(ex)\n        }\n        return\n    }\n\n    async initialiseCharacteristics() {\n        if(!this.service) {\n            console.error('No Service found')\n            return\n        }\n        this.status = new WifiScanningStatusCharacteristic(this.service, this.statusChangeCallback)\n        this.list = new WifiScanningList1Characteristic(this.service)\n        await this.status.init()\n        await this.list.init()\n    }\n\n}\n\nexport enum WifiScanningStatus{\n    IDLE,\n    SCAN, \n    SCANNING, \n    SCANNED, \n    ERROR\n}\n\nexport class WifiScanningStatusCharacteristic {\n    static uuid = '2b42180d-0000-1000-7701-00805f9b5ab3'\n\n    service: BluetoothRemoteGATTService\n    characteristic: BluetoothRemoteGATTCharacteristic | undefined\n    callback: Function\n\n    constructor(service: BluetoothRemoteGATTService, callback: Function) {\n        this.service = service\n        this.callback = callback\n    }\n\n    async init() {\n        this.characteristic = await this.service.getCharacteristic(WifiScanningStatusCharacteristic.uuid)\n        this.characteristic.addEventListener(\"characteristicvaluechanged\", (event: Event) => {\n            let status = (event.target as BluetoothRemoteGATTCharacteristic).value?.getUint8(0)\n            if(this.callback) this.callback(status as WifiScanningStatus)\n        })\n        this.characteristic.startNotifications()\n    }\n\n    async getStatus():Promise<WifiScanningStatus> {\n        if(!this.characteristic) {\n            console.error('No Characteristic found')\n            return WifiScanningStatus.ERROR\n        }\n        let status = await this.characteristic.readValue()\n        if(status.buffer.byteLength === 1) {\n            let state:WifiScanningStatus = status.getUint8(0)\n            console.info('ye state aayi hai', state)\n            if(state < WifiScanningStatus.ERROR) {\n                return state as WifiScanningStatus\n            }\n        }\n        return WifiScanningStatus.ERROR\n    }\n\n    async setStatus(status: WifiScanningStatus) {\n        if(!this.characteristic) {\n            throw Error('No Characteristic found')\n        }\n        if(status !== WifiScanningStatus.SCAN)\n            return\n        return await this.characteristic.writeValue(Buffer.from([status]))\n    }\n\n}\n\nexport class WifiScanningList1Characteristic {\n    static uuid = '2b42180d-0000-1000-7702-00805f9b5ab3'\n\n    service: BluetoothRemoteGATTService\n    characteristic: BluetoothRemoteGATTCharacteristic | undefined\n\n    constructor(service: BluetoothRemoteGATTService) {\n        this.service = service\n    }\n\n    async init() {\n        this.characteristic = await this.service.getCharacteristic(WifiScanningList1Characteristic.uuid)\n    }\n\n    async getList1():Promise<string> {\n        if(!this.characteristic) {\n            throw Error('No Characteristic found')\n        }\n        let networks = await this.characteristic.readValue()\n        let string = new TextDecoder(\"utf-8\").decode(networks.buffer)\n        console.log('yaha kara read', string)\n        return string\n    }\n\n}\n"],"sourceRoot":""}